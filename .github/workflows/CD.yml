name: Continuous Delivery

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Sentry
            dockerfile: Dockerfile
            image: ghcr.io/penpow/sentry

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ matrix.image }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/${{ matrix.dockerfile }}
          push: true
          build-args: |
            ENVIRONMENT=production
            GIT_COMMIT=${{ github.sha }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Image digest
        if: ${{ !failure() }}
        run: echo ${{ steps.docker_build.outputs.digest }}

  sentry:
    runs-on: ubuntu-latest
    needs: [docker]

    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      
      - name: Add problem matcher
        run: echo "::add-matcher::.github/problemMatchers/tsc.json"

      - name: Use Node.js v18
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
          registry-url: https://registry.npmjs.org/

      - name: Install Dependencies
        run: npm ci

      - name: Build Code
        run: npx tsc

      - name: Authenticate Sentry
        run: ./node_modules/.bin/sentry-cli login --auth-token ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Upload Sentry Release
        run: |
          chmod +x ./scripts/buildSentryRelease.sh
          ./scripts/buildSentryRelease.sh
        shell: bash

  deployment:
    runs-on: ubuntu-latest
    needs: [docker, sentry]
    permissions:
      deployments: write

    steps:
      - uses: chrnorm/deployment-action@v2
        name: Create Deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          initial-status: 'in_progress'
          ref: ${{ github.sha }}
          sha: ${{ github.sha }}
          auto-inactive: false
          environment: Production Bot

      - name: Deploy Stage
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.SENTRY_DEPLOYMENT_HTTP_URL }}
          timeout: 3600000
          method: 'GET'
          customHeaders: '{"Authorization": "Bearer updatesentry"}'

      - name: Update Deployment Status
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          auto-inactive: true
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}